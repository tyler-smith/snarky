// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function Make(N) {
  return (function (Fq) {
      return (function (Coefficients) {
          var zero_000 = /* x */Fq.zero;
          var zero_001 = /* y */Fq.one;
          var zero_002 = /* z */Fq.zero;
          var zero = /* record */[
            zero_000,
            zero_001,
            zero_002
          ];
          var Affine = { };
          var of_affine = function (param) {
            return /* record */[
                    /* x */param[0],
                    /* y */param[1],
                    /* z */Fq.one
                  ];
          };
          var is_zero = function (t) {
            if (Curry._2(Fq.equal, Fq.zero, t[/* x */0])) {
              return Curry._2(Fq.equal, Fq.zero, t[/* z */2]);
            } else {
              return false;
            }
          };
          var to_affine_exn = function (param) {
            var z_inv = Curry._1(Fq.inv, param[/* z */2]);
            return /* tuple */[
                    Curry._2(Fq.$star, param[/* x */0], z_inv),
                    Curry._2(Fq.$star, param[/* y */1], z_inv)
                  ];
          };
          var to_affine = function (t) {
            if (is_zero(t)) {
              return ;
            } else {
              return to_affine_exn(t);
            }
          };
          var is_well_formed = function (t) {
            var z = t[/* z */2];
            var x = t[/* x */0];
            if (is_zero(t)) {
              return true;
            } else {
              var x2 = Curry._1(Fq.square, x);
              var y2 = Curry._1(Fq.square, t[/* y */1]);
              var z2 = Curry._1(Fq.square, z);
              return Curry._2(Fq.equal, Curry._2(Fq.$star, z, Curry._2(Fq.$neg, y2, Curry._2(Fq.$star, Coefficients.b, z2))), Curry._2(Fq.$star, x, Curry._2(Fq.$plus, x2, Curry._2(Fq.$star, Coefficients.a, z2))));
            }
          };
          var $plus = function (t1, t2) {
            if (is_zero(t1)) {
              return t2;
            } else if (is_zero(t2)) {
              return t1;
            } else {
              var x1z2 = Curry._2(Fq.$star, t1[/* x */0], t2[/* z */2]);
              var x2z1 = Curry._2(Fq.$star, t1[/* z */2], t2[/* x */0]);
              var y1z2 = Curry._2(Fq.$star, t1[/* y */1], t2[/* z */2]);
              var y2z1 = Curry._2(Fq.$star, t1[/* z */2], t2[/* y */1]);
              if (Curry._2(Fq.equal, x1z2, x2z1) && Curry._2(Fq.equal, y1z2, y2z1)) {
                var xx = Curry._1(Fq.square, t1[/* x */0]);
                var zz = Curry._1(Fq.square, t1[/* z */2]);
                var w = Curry._2(Fq.$plus, Curry._2(Fq.$star, Coefficients.a, zz), Curry._2(Fq.$plus, Curry._2(Fq.$plus, xx, xx), xx));
                var y1z1 = Curry._2(Fq.$star, t1[/* y */1], t1[/* z */2]);
                var s = Curry._2(Fq.$plus, y1z1, y1z1);
                var ss = Curry._1(Fq.square, s);
                var sss = Curry._2(Fq.$star, s, ss);
                var r = Curry._2(Fq.$star, t1[/* y */1], s);
                var rr = Curry._1(Fq.square, r);
                var b = Curry._2(Fq.$neg, Curry._2(Fq.$neg, Curry._1(Fq.square, Curry._2(Fq.$plus, t1[/* x */0], r)), xx), rr);
                var h = Curry._2(Fq.$neg, Curry._1(Fq.square, w), Curry._2(Fq.$plus, b, b));
                var x3 = Curry._2(Fq.$star, h, s);
                var y3 = Curry._2(Fq.$neg, Curry._2(Fq.$star, w, Curry._2(Fq.$neg, b, h)), Curry._2(Fq.$plus, rr, rr));
                return /* record */[
                        /* x */x3,
                        /* y */y3,
                        /* z */sss
                      ];
              } else {
                var z1z2 = Curry._2(Fq.$star, t1[/* z */2], t2[/* z */2]);
                var u = Curry._2(Fq.$neg, y2z1, y1z2);
                var uu = Curry._1(Fq.square, u);
                var v = Curry._2(Fq.$neg, x2z1, x1z2);
                var vv = Curry._1(Fq.square, v);
                var vvv = Curry._2(Fq.$star, v, vv);
                var r$1 = Curry._2(Fq.$star, vv, x1z2);
                var a = Curry._2(Fq.$neg, Curry._2(Fq.$star, uu, z1z2), Curry._2(Fq.$plus, Curry._2(Fq.$plus, vvv, r$1), r$1));
                var x3$1 = Curry._2(Fq.$star, v, a);
                var y3$1 = Curry._2(Fq.$neg, Curry._2(Fq.$star, u, Curry._2(Fq.$neg, r$1, a)), Curry._2(Fq.$star, vvv, y1z2));
                var z3 = Curry._2(Fq.$star, vvv, z1z2);
                return /* record */[
                        /* x */x3$1,
                        /* y */y3$1,
                        /* z */z3
                      ];
              }
            }
          };
          var scale = function (base, s) {
            var _found_one = false;
            var _acc = zero;
            var _i = Curry._1(N.num_bits, s) - 1 | 0;
            while(true) {
              var i = _i;
              var acc = _acc;
              var found_one = _found_one;
              if (i < 0) {
                return acc;
              } else {
                var acc$1 = found_one ? $plus(acc, acc) : acc;
                if (Curry._2(N.test_bit, s, i)) {
                  _i = i - 1 | 0;
                  _acc = $plus(acc$1, base);
                  _found_one = true;
                  continue ;
                } else {
                  _i = i - 1 | 0;
                  _acc = acc$1;
                  continue ;
                }
              }
            };
          };
          var $star = function (s, g) {
            return scale(g, s);
          };
          var negate = function (param) {
            return /* record */[
                    /* x */param[/* x */0],
                    /* y */Curry._1(Fq.negate, param[/* y */1]),
                    /* z */param[/* z */2]
                  ];
          };
          var $neg = function (t1, t2) {
            return $plus(t1, negate(t2));
          };
          return {
                  zero: zero,
                  Coefficients: Coefficients,
                  Affine: Affine,
                  of_affine: of_affine,
                  is_zero: is_zero,
                  to_affine_exn: to_affine_exn,
                  to_affine: to_affine,
                  is_well_formed: is_well_formed,
                  $plus: $plus,
                  scale: scale,
                  $star: $star,
                  negate: negate,
                  $neg: $neg
                };
        });
    });
}

var $eq = /* Don't_use_polymorphic_compare */-371192363;

exports.$eq = $eq;
exports.Make = Make;
/* No side effect */
