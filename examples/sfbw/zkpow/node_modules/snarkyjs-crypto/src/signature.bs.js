// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function Make0(Inputs) {
  var Signature = { };
  var Private_key = { };
  var of_private_key = function (s) {
    return Curry._3(Inputs.Group.scale, undefined, Inputs.Group.one, s);
  };
  var Public_key = {
    of_private_key: of_private_key
  };
  var challenge = function (public_key, r, message) {
    var match = Curry._1(Inputs.Group.to_affine_exn, public_key);
    return Curry._1(Inputs.Scalar.of_field, Curry._1(Inputs.Hash.hash, $$Array.append(/* array */[
                        match[0],
                        match[1],
                        r
                      ], message)));
  };
  var check = function (param, public_key, m) {
    var r = param[0];
    var e = challenge(public_key, r, m);
    var e_pk = Curry._3(Inputs.Group.scale, undefined, Curry._1(Inputs.Group.negate, public_key), e);
    var s_g_e_pk = Curry._3(Inputs.Group.scale, Caml_option.some(e_pk), Inputs.Group.one, param[1]);
    var match = Curry._1(Inputs.Group.to_affine_exn, s_g_e_pk);
    var y_even = Curry._1(Inputs.Field.is_even, match[1]);
    var r_correct = Curry._2(Inputs.Field.equal, r, match[0]);
    return Curry._2(Inputs.Bool.$amp$amp, r_correct, y_even);
  };
  return {
          Signature: Signature,
          Private_key: Private_key,
          Public_key: Public_key,
          challenge: challenge,
          check: check
        };
}

function Make_signer(Inputs) {
  var $$let = Inputs.Scalar;
  var Inputs_Bool = Inputs.Bool;
  var Inputs_Field = Inputs.Field;
  var Inputs_Scalar = {
    of_field: $$let.of_field,
    to_field: $$let.to_field
  };
  var Inputs_Group = Inputs.Group;
  var Inputs_Hash = Inputs.Hash;
  var Signature = { };
  var Private_key = { };
  var of_private_key = function (s) {
    return Curry._3(Inputs_Group.scale, undefined, Inputs_Group.one, s);
  };
  var Public_key = {
    of_private_key: of_private_key
  };
  var challenge = function (public_key, r, message) {
    var match = Curry._1(Inputs_Group.to_affine_exn, public_key);
    return Curry._1(Inputs_Scalar.of_field, Curry._1(Inputs_Hash.hash, $$Array.append(/* array */[
                        match[0],
                        match[1],
                        r
                      ], message)));
  };
  var check = function (param, public_key, m) {
    var r = param[0];
    var e = challenge(public_key, r, m);
    var e_pk = Curry._3(Inputs_Group.scale, undefined, Curry._1(Inputs_Group.negate, public_key), e);
    var s_g_e_pk = Curry._3(Inputs_Group.scale, Caml_option.some(e_pk), Inputs_Group.one, param[1]);
    var match = Curry._1(Inputs_Group.to_affine_exn, s_g_e_pk);
    var y_even = Curry._1(Inputs_Field.is_even, match[1]);
    var r_correct = Curry._2(Inputs_Field.equal, r, match[0]);
    return Curry._2(Inputs_Bool.$amp$amp, r_correct, y_even);
  };
  var derive = function (message, public_key, private_key) {
    var match = Curry._1(Inputs.Group.to_affine_exn, public_key);
    return Curry._1(Inputs.Hash.hash, $$Array.append(/* array */[
                    match[0],
                    match[1],
                    Curry._1(Inputs.Scalar.to_field, private_key)
                  ], message));
  };
  var sign = function (d_prime, m) {
    var public_key = Curry._3(Inputs.Group.scale, undefined, Inputs.Group.one, d_prime);
    var k_prime = Curry._1(Inputs.Scalar.of_field, derive(m, public_key, d_prime));
    var match = Curry._1(Inputs.Group.to_affine_exn, Curry._3(Inputs.Group.scale, undefined, Inputs.Group.one, k_prime));
    var r = match[0];
    var k = Curry._1(Inputs.Field.is_even, match[1]) ? k_prime : Curry._1(Inputs.Scalar.negate, k_prime);
    var e = challenge(public_key, r, m);
    var s = Curry._2(Inputs.Scalar.$plus, k, Curry._2(Inputs.Scalar.$star, e, d_prime));
    return /* tuple */[
            r,
            s
          ];
  };
  return {
          Signature: Signature,
          Private_key: Private_key,
          Public_key: Public_key,
          challenge: challenge,
          check: check,
          derive: derive,
          sign: sign
        };
}

exports.Make0 = Make0;
exports.Make_signer = Make_signer;
/* No side effect */
